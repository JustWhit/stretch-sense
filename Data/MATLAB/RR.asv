
%% get Respiratory Rate from Signal
import javax.xml.xpath.*

Folder = 'Z:\GitRepositories\stretch-sense\Data';
wFolder = '\Spirometry';


XMLfile = char(fullfile(Folder, wFolder, 'Spiro_6_19_18.xml'));

Folder = 'Z:\GitRepositories\stretch-sense\Data\';
%MACfilename = '/Users/justinschaffner/Desktop/GitRepositories/stretch-sense/Data/SenseAppData/CAP_2018-03-07542162368_U_R_SIDE.csv';
Filename = 'SenseAppData\Abdominal\CAP_2018-06-19_JUSTIN_SVC.csv'
Gfilename = 'SenseAppData\Abdominal\GT_2018-06-19_JUSTIN_SVC.csv'

xmlDoc = xmlread(XMLfile);

factory = XPathFactory.newInstance;
xpath = factory.newXPath;

FlowData = xpath.compile('//ChannelVolume/SamplingValues');

FlowNodes = FlowData.evaluate(xmlDoc, XPathConstants.NODESET);

% extracting Spirometer traces from XML file
node3 = FlowNodes.item(FlowNodes.getLength-1);
C3 = strsplit(char(node3.getFirstChild.getNodeValue));
C3 = str2double(C3);
C3 = transpose(C3);
Fs = 100;
sRate = 1/Fs;
C3time = linspace(0,length(C3)/100,length(C3));
C3time = transpose(C3time);
tsC3=timeseries(C3,C3time);

node2 = FlowNodes.item(FlowNodes.getLength-2);
C2 = strsplit(char(node2.getFirstChild.getNodeValue));
C2 = str2double(C2);
C2 = transpose(C2);
C2time = linspace(0,length(C2)/100,length(C2));
C2time = transpose(C2time);
tsC2=timeseries(C2,C2time);

node1 = FlowNodes.item(FlowNodes.getLength-4);
C1 = strsplit(char(node1.getFirstChild.getNodeValue));
C1 = str2double(C1);
C1 = transpose(C1);
C1time = linspace(0,length(C1)/100,length(C1));
C1time = transpose(C1time);
tsC1=timeseries(C1, C1time);


%extracting capacitance traces from the Stretch Sense data file
capfile=strcat(Folder,Filename);
GTfile = strcat(Folder,Gfilename);

% Read data
T=readtable(capfile);
GT=readtable(GTfile);

time = T{:,2};
cap = T{:,1};

%reset timestamps to start at zero
start=time(1);
for n = 1:length(time)
   time(n) = time(n)-start;
end

%extract ground truth from ground truth file
Ttime = GT{:,2};
Tlabel = GT{:,1};
% for n = 1:length(Ttime)
%    Ttime(n) = (100 * (Ttime(n) - floor(Ttime(n)))) + (floor(Ttime(n)) * 60);
% end
% start = cap(1);
% for i=1:length(cap)
%     cap(i)= cap(i)-start;
% end
start=Ttime(1);
for n = 1:length(Ttime)
    Ttime(n)=Ttime(n)-start;
end

%resample cap data to match sample rate from spirometer
Fs = 100;
sRate = 1/Fs;
tsvector = 0:sRate:time(length(time));

ts=timeseries(cap,time);

ts = resample(ts,tsvector);
    
%     for i=2:2:length(Tlabel)
%         A(i) = getsampleusingtime(ts, Ttime(i),Ttime(i+1));
%     end





%extract individual effort traces from capacitance data using the ground
%truth as a guide and resize the two samples to the same length for
%correlation

figure; %hold on;
A1 = getsampleusingtime(ts,Ttime(2),Ttime(3));

A1p = A1.Data;
C1p = tsC1.Data;
length1 = min([numel(A1p) numel(C1p)]);
A1p = A1p(1:length1);
C1p = C1p(1:length1);

A2=getsampleusingtime(ts,Ttime(4),Ttime(5));
A2p = A2.Data;
C2p = tsC2.Data;
length2 = min([numel(A2p) numel(C2p)]);
A2p = A2p(1:length2);
C2p = C2p(1:length2);

A3 = getsampleusingtime(ts,Ttime(6),Ttime(7));
A3p = A3.Data;
C3p = tsC3.Data;
length3 = min([numel(A3p) numel(C3p)]);
A3p = A3p(1:length3);
C3p = C3p(1:length3);

A1p = [0.0; cumsum(diff(A1p))];
A1p = smooth(A1p,10,'lowess');

[Pxx,F]=pwelch(A1p,Fs);
freq = meanfreq(Pxx,F);
plot(F,Pxx); ylabel('PSD'); xlabel('Frequency(Hz)'); grid on; [~,loc] = max(Pxx); FREQ_EST = F(loc); title(['PWelch Frequency estimate = ', num2str(FREQ_EST),' Hz; MeanFreq est = ', num2str(freq)]);

% % Find peaks in data
    [pks,locs,widths,proms] = findpeaks(A1p, C1time, 'MinPeakProminence',4, 'SortStr','descend');
    figure;
    plot(C1time,A1p,locs,pks,'o'); ylabel('Capacitance(pF)');xlabel('Time(s)'); grid on; FREQ = numel(pks)/locs(end); title(['Peak Detection Freq Estimate = ', num2str(FREQ),


% NFFT = 2^nextpow2(length1); % Next power of 2 from length of y
% Y = fft(A1p,NFFT)/length1;
% f = Fs/2*linspace(0,1,NFFT/2+1);
% % Plot single-sided amplitude spectrum.
% plot(f,2*abs(Y(1:NFFT/2+1))) 
% title('Single-Sided Amplitude Spectrum of y(t)')
% xlabel('Frequency (Hz)')
% ylabel('|Y(f)|')
% %I added the next lines to find the value
% %find maximum value, it should be the fundamental frequency (approximated)
% [C,I]= max(2*abs(Y(1:NFFT/2+1)));
% F = f(I);
